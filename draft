#include <iostream>
#include <string.h>
#include <windows.h>
#include <conio.h>
#include<unistd.h>
#include <vector>
#include <string>
#include <set>
#include <algorithm>

using namespace std;
struct rentalrequest{
string customername;
string brand;
string platenumber;
int duration;
double cost;
string status;

};
vector<rentalrequest> rentalhistory;

struct User{
string name;
string username;
string password;
string role;
};
vector<User> users;


class Car{
    public:
    string brand;
    string model;
    vector<string> platenum;
    int mincost;
    int maxcost;
    bool availability;


Car(string b, string m, vector<string> p, int maxc, int minc){
brand = b;
model = m;
platenum = p;
mincost = minc;
maxcost = maxc;
availability = true;
}

bool isAvailable() const {
        return !platenum.empty();
    }
bool removePlate(const string& plate) {
        auto it = find(platenum.begin(), platenum.end(), plate);
        if (it != platenum.end()) {
            platenum.erase(it);
            return true;
        }
        return false;
    }
void display() const{
cout << "Brand: " << brand
<< " | |" << "\tModel: " << model
<< " \t| |" << "\tPlate Number: ";
        for(size_t i = 0; i < platenum.size(); ++i) {
            cout << platenum[i];
            if (i < platenum.size() - 1) cout << ", ";
        }
cout << " \t| | Rental Cost: ₱" << mincost << "- ₱" << maxcost
<< " \t| |" << "\tStatus: " << (availability ? "Available" : "Rented/Not Avaiable") << endl;
}

};

void seedDefaultUsers() {

    User defaultAdmin;
    User defaultEmployee;
    User defaultCostumer;
    defaultAdmin.name = "ADMIN MARK";
    defaultAdmin.username = "admin";
    defaultAdmin.password = "a";
    defaultAdmin.role = "admin";
    users.push_back(defaultAdmin);

    defaultEmployee.name = "Mark Alcayde";
    defaultEmployee.username = "a";
    defaultEmployee.password = "a";
    defaultEmployee.role = "employee";
    users.push_back(defaultEmployee);

    defaultCostumer.name = "Costumer Mark";
    defaultCostumer.username = "q";
    defaultCostumer.password = "q";
    defaultCostumer.role = "costumer";
    users.push_back(defaultCostumer);
}
class rentsys{
private:
    vector<Car> cars;

public:
    void allcars(){
    cars.push_back(Car("Toyota", "Vios, Innova, Fortuner", {"CDB 4634", "UBT 4667", "UBT 3676"}, 2500, 4500));
    cars.push_back(Car("Honda", "City, Civic, CR-V", {"TTC 3871", "TTK 4437", "TTY 8778"}, 2500, 4500));
    cars.push_back(Car("Mitsubishi", "Mirage, Montero Sport", {"GPE 2397", "EPG 7072", "JPR 7301"}, 2000, 4000));
    cars.push_back(Car("Nissan", "Almera, Navara, Terra", {"CTC 2573", "CYO 7971", "OYS 8310"}, 2500, 4500));
    cars.push_back(Car("Hyundai", "Accent, Tucson", {"CTC 2573", "CYO 7971", "OYS 8310"}, 2500, 4500));
    cars.push_back(Car("Kia", "Picanto, Sportage", {"TYC 0001", "YSY 7281"}, 2000, 4000));
    cars.push_back(Car("Ford", "Ranger, Everest", {"YTY 8282", "POA 0911"}, 3000, 5000));
    cars.push_back(Car("Chevrolet", "Spark, Trailblazer", {"MMO 3311", "MMM 0098"}, 2500, 4500));
    cars.push_back(Car("Mazda", "Mazda 2, CX-5", {"POT 9821", "NXT 8882"}, 2500, 4500));
    cars.push_back(Car("Suzuki", "Swift, Ertiga", {"SWD 7272", "MMA 8766"}, 2000, 3500));
    cars.push_back(Car("Subaru", "Forester, XV", {"MOA 6612", "MAL 0043"}, 3000, 5000));
    cars.push_back(Car("Volkswagen", "3 Series, X3", {"NEU 7722", "NYW 7627"}, 5000, 8000));
    cars.push_back(Car("BMW", "City, Civic, CR-V", {"TTC 3871", "TTK 4437", "TTY 8778"}, 2500, 4500));
    cars.push_back(Car("Mercedes-Benz", "C-Class, GLC", {"POA 7621", "TOL 7509"}, 6000, 9000));
    cars.push_back(Car("Audi", "A4, Q5", {"AUK 0493", "KOM 7784"}, 6000, 9000));
    cars.push_back(Car("Lexus", "ES, RX", {"KOW 8822", "MOL 9928"}, 6000, 9000));
    cars.push_back(Car("Isuzu", "D-Max, mu-X", {"NTX 2891", "TOP 2938"}, 3000, 5000));
    cars.push_back(Car("Chery", "Tiggo Series", {"POL 9273", "HGF 0192"}, 2500, 4000));
    cars.push_back(Car("Geely", "Coolray, Azkarra", {"OWT 0129", "YUT 8778"}, 2500, 4000));
    cars.push_back(Car("Foton", "Gratour, Toano", {"OIW 0987", "EWM 8789"}, 2500, 4500));
}


    void chooseCarBrand() {
    set<string> uniqueBrands;
    vector<string> brandList;


    for (const auto& car : cars) {
        uniqueBrands.insert(car.brand);
    }

    brandList.assign(uniqueBrands.begin(), uniqueBrands.end());


    cout << "\nAvailable Car Brands:\n";
    for (size_t i = 0; i < brandList.size(); ++i) {
        cout << "[" << i + 1 << "] " << brandList[i] << endl;
    }


    int selectedIndex;
    cout << "\nEnter the number of the brand you want to view: ";
    cin >> selectedIndex;

    if (selectedIndex < 1 || selectedIndex > (int)brandList.size()) {
        cout << "Invalid selection.\n";
        return;
    }

    string selectedBrand = brandList[selectedIndex - 1];
    cout << "\n--- Cars for Brand: " << selectedBrand << " ---\n";

    bool found = false;
    for (const auto& car : cars) {
        if (car.brand == selectedBrand && car.availability) {
            car.display();
            found = true;
        }
    }

    if (!found) {
        cout << "No available cars for this brand.\n";
    }

    cout << "\nPress any key to return to menu...";
    getch();
    system("cls");
}
vector<Car>& getCars() {
        return cars;
    }
    };


void admin();
void costumerMenu(User& costumer);
void employee(const User& employee);
void welcome();
void loadingscreen(){

cout << "Hello";
cin.get();

system("cls");
return;


}

bool employeeApproval() {
    string empUsername, empPassword;
    char ch;

    cout << "\n--- Employee Approval Required ---\n";
    cout << "Employee Username: ";
    cin >> empUsername;

    cout << "Employee Password: ";
    empPassword = "";
    while ((ch = _getch()) != '\r') {
        if (ch == '\b') {
            if (!empPassword.empty()) {
                empPassword.pop_back();
                cout << "\b \b";
            }
        } else {
            empPassword += ch;
            cout << '*';
        }
    }

    for (const auto& user : users) {
        if (user.username == empUsername && user.password == empPassword && user.role == "employee") {
            cout << "\nApproval Granted by Employee: " << user.name << "\n";
            return true;
        }
    }

    cout << "\nInvalid employee credentials. Approval denied.\n";
    return false;
}


rentsys rentalSystem;
void rentCar(User& costumer) {
    system("cls");
    cout << "--- Rent a Car ---" << endl;

    vector<Car>& cars = rentalSystem.getCars();
    set<string> uniqueBrands;


    for (const auto& car : cars) {
        if (car.isAvailable()) {
            uniqueBrands.insert(car.brand);
        }
    }

    if (uniqueBrands.empty()) {
        cout << "No available cars to rent.\n";
        system("pause");
        system("cls");
        return;
    }


    vector<string> brandList(uniqueBrands.begin(), uniqueBrands.end());
    cout << "\nAvailable Car Brands:\n";
    for (size_t i = 0; i < brandList.size(); ++i) {
        cout << "[" << i + 1 << "] " << brandList[i] << endl;
    }

    int brandChoice;
    cout << "\nEnter the number of the brand you want to view: ";
    cin >> brandChoice;

    if (brandChoice < 1 || brandChoice > (int)brandList.size()) {
        cout << "Invalid selection.\n";
        system("pause");
        system("cls");
        return;
    }

    string selectedBrand = brandList[brandChoice - 1];
    cout << "\n--- Cars for Brand: " << selectedBrand << " ---\n";


    vector<Car*> availableCars;
for (auto& car : cars) {
    if (car.brand == selectedBrand && car.isAvailable()) {
        car.display();
        availableCars.push_back(&car);
    }
    }


    if (availableCars.empty()) {
        cout << "No available cars for this brand.\n";
        system("pause");
        system("cls");
        return;
    }


    vector<string> allPlates;
for (const auto* carPtr : availableCars) {
    for (const auto& plate : carPtr->platenum) {
        allPlates.push_back(plate);
    }
}

    cout << "\nAvailable Plate Numbers:\n";
    for (size_t i = 0; i < allPlates.size(); ++i) {
        cout << "[" << i + 1 << "] " << allPlates[i] << endl;
    }

    int plateChoice;
    cout << "\nEnter the number of the plate you want to rent: ";
    cin >> plateChoice;

    if (plateChoice < 1 || plateChoice > (int)allPlates.size()) {
        cout << "Invalid selection.\n";
        system("pause");
        system("cls");
        return;
    }

    string chosenPlate = allPlates[plateChoice - 1];
    int paymentoption;
    int duration;
    cout << "\nSelect payment method: " << endl;
    cout << "[1] - Per Day" << endl;
    cout << "[2] = Per Week" << endl;
    cout << "Choice: ";
    cin >> paymentoption;

    if(paymentoption != 1 && paymentoption != 2){
        cout << "Invalid payment selection \n\n";
        system("pause");
        system("cls");
        return;
    }

    cout << "\nEnter number of " << (paymentoption == 1 ? "days" : "weeks") << ": ";
    cin >> duration;

    bool plateFound = false;
    for (auto& car : cars) {
    int averagecost = (car.mincost + car.maxcost) / 2;
    int totalcost = averagecost * duration;


       if (find(car.platenum.begin(), car.platenum.end(), chosenPlate) != car.platenum.end()) {
    if (!car.isAvailable()) {
        cout << "The car with plate " << chosenPlate << " is already rented.\n";
        plateFound = true;
        break;
    }


    int averagecost = (car.mincost + car.maxcost) / 2;
    int totalcost = averagecost * duration;
    if (paymentoption == 2) {
        totalcost *= 7;
    }

    cout << "\nEstimated Rental Cost for " << duration
         << (paymentoption == 1 ? " days" : " weeks")
         << ": ₱" << totalcost << endl;

     char confirmation;
            cout << "Do you want to proceed with the rental? (Y = Yes, N = No): ";
            cin >> confirmation;

            if (confirmation == 'y' || confirmation == 'Y') {
                car.removePlate(chosenPlate);
                car.availability = !car.platenum.empty();

                rentalrequest request;
                request.customername = costumer.name;
                request.brand = car.brand;
                request.platenumber = chosenPlate;
                request.duration = (paymentoption == 2 ? duration * 7 : duration);
                request.cost = totalcost;
                request.status = "Pending";

                rentalhistory.push_back(request);

                cout << "\n Please wait for the approval.\n";
                sleep(1);
                system("cls");
                return;
            } else {
                cout << "Rental Cancelled!" << endl;
                break;
            }
        }
    }

    system("pause");
    system("cls");
}




void loginpage(){
    int cont;
    char ch;
    bool error = false;
    bool loggedIn = false;

    string inputusername, inputpassword;
    while(true){
            if(error == true){
    cout << "Credentials Mismatched!" << endl;
}
cout << "Welcome to Mark's Car Rental" << endl;

cout << "Please log in" << endl << endl;
cout << "Username: ";
cin >> inputusername;
cout << "Password: ";
 inputpassword = "";
while ((ch = _getch()) != '\r'){
        if (ch == '\b') {
            if (!inputpassword.empty()) {
               inputpassword.erase(inputpassword.size() - 1);
                cout << "\b \b";
            }
        } else {
            inputpassword += ch;
            cout << '*';
        }
    }
    cout << "\n\nDo you wish to continue? [1] Log In, [2] Back (choice): ";
    cin >> cont;
    cin.clear();

    switch(cont){
   case 1:
    for (auto& user : users) {
    if (user.username == inputusername && user.password == inputpassword) {
            error = false;
            loggedIn = true;
        if (user.role == "admin") {
                system("cls");
            admin();
        } else if (user.role == "costumer") {
            system("cls");
            costumerMenu(user);
        } else if (user.role == "employee"){
            system("cls");
        employee(user);
        }

        return;
    }

}
  if (!loggedIn) {
        error = true;
        system("cls");
        break;
    }
   case 2:
    cout << "Please wait";
    sleep(1);
    welcome();
    break;

   default:
    cout << "Invalid choices";
    break;
    }

system("cls");


}
system("cls");
}

void registerpage(){
User newUser;
    cout << "=== Register Account ===" << endl;
    cout << "Enter your name: ";
    cin.ignore();
    getline(cin, newUser.name);

    cout << "Choose a username: ";
    cin >> newUser.username;

    cout << "Choose a password: ";
    newUser.password = "";
    char ch;
    while ((ch = _getch()) != '\r') {
        if (ch == '\b') {
            if (!newUser.password.empty()) {
                newUser.password.pop_back();
                cout << "\b \b";
            }
        } else {
            newUser.password += ch;
            cout << '*';
        }
    }
    cout << endl;

    newUser.role = "costumer";

    for (const auto& user : users) {
        if (user.username == newUser.username) {
            cout << "Username already exists. Please try again.\n";
            Sleep(1500);
            system("cls");
            return;
        }
    }

    users.push_back(newUser);
    cout << "Account successfully created! You can now log in.\n";
    Sleep(1500);
    system("cls");
    welcome();

}

void welcome(){
    int choice;
    while(choice != 3){
cout << "Welcome to Mark's Car Rental" << endl;
cout << "[1] Login" << endl;
cout << "[2] Signup" << endl;
cout << "[3] Exit" << endl;
cout << "Choice: ";
cin >> choice;

switch(choice){
   case 1:
       system("cls");
       loginpage();
       break;
   case 2:
       system("cls");
    registerpage();
    break;
   case 3:
       cout << "Exiting Mark's Car Rental, Thank You";
       sleep(1);
       system("cls");
    exit(0);
    break;
   default:
    cout << "Invalid, Please choose 1, 2 or 3" << endl;
    break;
}
}
}

void admin() {
    int choice;
    while (true) {
        cout << "\n=== Admin Panel ===" << endl;
        cout << "[1] View All Users" << endl;
        cout << "[2] Add Employee Account" << endl;
        cout << "[3] View All Cars" << endl;
        cout << "[4] Logout" << endl;
        cout << "Choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                for (const auto& user : users) {
                    cout << "Name: " << user.name << " | Role: " << user.role << endl;
                }
                break;
            case 2: {
                User newEmp;
                cout << "Enter employee name: ";
                cin.ignore(); getline(cin, newEmp.name);
                cout << "Enter username: ";
                cin >> newEmp.username;
                cout << "Enter password: ";
                char ch;
                newEmp.password = "";
                while ((ch = _getch()) != '\r') {
                    newEmp.password += ch;
                    cout << '*';
                }
                newEmp.role = "employee";
                users.push_back(newEmp);
                cout << "\nEmployee added.\n";
                break;
            }
            case 3:
                for (auto& car : rentalSystem.getCars()) {
                    car.display();
                }
                break;

            case 4:
                system("cls");
                return;
            default:
                cout << "Invalid choice." << endl;
        }

        system("pause");
        system("cls");
    }
}
void renthistory(const User& costumer) {
    cout << "--- Rental History ---\n";
    bool found = false;
    for (const auto& req : rentalhistory) {
        if (req.customername == costumer.name) {
            cout << "Brand: " << req.brand
                 << " | Plate: " << req.platenumber
                 << " | Duration: " << req.duration << " days"
                 << " | Total Cost: ₱" << req.cost
                 << " | Status: " << req.status << endl;
            found = true;
        }
    }

    if (!found) {
        cout << "No rental history found.\n";
    }

    cout << "\n";
    system("pause");
    system("cls");
}



void costumerMenu(User& costumer){
int choice;
string plate;
vector<string> brandlist;

while(true){
    cout << "Hello costumer, " << costumer.name << endl;
    cout << "[1] View available cars" << endl;
    cout << "[2] Rent Cars" << endl;
    cout << "[3] History" << endl;
    cout << "[4] Logout" << endl;
    cout << "Choose: ";
    cin >> choice;

    switch(choice){
case 1:
    system("cls");
    rentalSystem.chooseCarBrand();
    break;
case 2:
    rentCar(const_cast<User&>(costumer));
    break;
case 3:
    system("cls");
    renthistory(costumer);
    break;
case 4:
    cout << "Logging Out" << endl;
    sleep(1);
    system("cls");
    return;
    }
}
}

void employee(const User& employee) {
    int choice;
    while (true) {
        cout << "\n=== Employee Panel (" << employee.name << ") ===\n";
        cout << "[1] View Available Cars\n";
        cout << "[2] Return a Car\n";
        cout << "[3] Logout\n";
        cout << "Choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                rentalSystem.chooseCarBrand();
                break;
            case 2: {
                string plate;
                cout << "Enter plate number to return: ";
                cin >> plate;
                bool found = false;
                for (auto& car : rentalSystem.getCars()) {
                    if (find(car.platenum.begin(), car.platenum.end(), plate) == car.platenum.end()) {
                        // Plate not in list, maybe it was rented before
                        car.platenum.push_back(plate);
                        car.availability = true;
                        cout << "Car with plate " << plate << " returned successfully.\n";
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    cout << "Plate not recognized or already returned.\n";
                }
                break;
            }
            case 3:
                system("cls");
                return;
            default:
                cout << "Invalid choice.\n";
        }
        system("pause");
        system("cls");
    }
}


int main(){
system("chcp 65001");
//loadingscreen();
 rentalSystem.allcars();
 seedDefaultUsers();
 welcome();
return 0;
}
